name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - version: '0.16.1'
            tags: |
              type=raw,value=v0.16.1
              type=raw,value=v0.16
              type=raw,value=latest
          - version: '0.16.0'
            tags: |
              type=raw,value=v0.16.0
          - version: '0.15.7'
            tags: |
              type=raw,value=v0.15.7
              type=raw,value=v0.15
          - version: '0.15.6'
            tags: |
              type=raw,value=v0.15.6
          - version: '0.15.5'
            tags: |
              type=raw,value=v0.15.5
          - version: '0.15.4'
            tags: |
              type=raw,value=v0.15.4
          - version: '0.15.3'
            tags: |
              type=raw,value=v0.15.3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: ${{ matrix.tags }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Set version from matrix
      - name: Set version
        id: version
        run: |
          echo "version=${{ matrix.version }}" >> "$GITHUB_OUTPUT"
          echo "Using rtorrent version: ${{ matrix.version }}"

      # Build the Docker image once and load it locally for testing
      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
          build-args: |
            LIBTORRENT_VERSION=${{ matrix.version }}
            RTORRENT_VERSION=${{ matrix.version }}

      # Test the built image by running rtorrent with --help flag
      - name: Test container - run rtorrent help
        run: |
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ matrix.version }}"
          echo "Testing image: $IMAGE_TAG"
          
          # Run rtorrent with --help to verify it works
          docker run --rm "$IMAGE_TAG" -h | grep -q "Usage:"
          echo "✓ rtorrent help command succeeded"
          
          # Verify rtorrent version matches the Dockerfile
          docker run --rm "$IMAGE_TAG" -h | grep -q "${{ steps.version.outputs.version }}"
          echo "✓ rtorrent version ${{ steps.version.outputs.version }} verified"

      # Install and run container structure tests
      - name: Run container structure tests
        run: |
          # Download container-structure-test
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
          
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ matrix.version }}"
          echo "Running structure tests on image: $IMAGE_TAG"
          
          # Run the structure tests
          container-structure-test test --image "$IMAGE_TAG" --config container-structure-test.yaml

      # Push the already-built image to registry after tests pass (non-PR only)
      - name: Push Docker image
        if: github.event_name != 'pull_request'
        run: |
          # Push all tags for this image using JSON output
          printf '%s\n' '${{ steps.meta.outputs.json }}' | jq -r '.tags[]' | while read -r tag; do
            echo "Pushing $tag"
            docker push "$tag"
          done



